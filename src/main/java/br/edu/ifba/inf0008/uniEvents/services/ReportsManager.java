package br.edu.ifba.inf0008.uniEvents.services;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import br.edu.ifba.inf0008.uniEvents.model.events.Event;
import br.edu.ifba.inf0008.uniEvents.model.participants.Participant;
import br.edu.ifba.inf0008.uniEvents.utils.Lines;


public class ReportsManager {
  private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
  private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy");

  public String generateReport(List<Event> events, String reportTitle, Boolean isDetailed) {
    StringBuilder report = new StringBuilder();
    report.append(Lines.doubleLine()).append("\n");
    report.append(Lines.titleLine(String.format("Report: %s", reportTitle))).append("\n");
    report.append(Lines.titleLine(String.format("Created at: %s", LocalDateTime.now().format(DATE_TIME_FORMATTER)))).append("\n");
    report.append(Lines.titleLine("Generated by: UniEvents")).append("\n");
    report.append(Lines.doubleLine()).append("\n");
    report.append(Lines.titleLine("Events List")).append("\n");
    report.append(Lines.doubleLine()).append("\n");
    if(events.isEmpty()){
      report.append("No events found for this report.\n");
    } else {
      for (Event event : events) {
        report.append(Lines.straightLine()).append("\n");
        report.append(Lines.leftText(String.format("Event: %s", event.getEventType()))).append("\n");
        report.append(Lines.leftText(String.format("Title: %s", event.getName()))).append("\n");
        report.append(Lines.leftText(String.format("Description: %s", event.getDescription()))).append("\n");
        report.append(Lines.leftText(String.format("Modality: %s", event.getModality()))).append("\n");
        report.append(Lines.leftText(String.format("Location: %s", event.getLocation()))).append("\n");
        report.append(Lines.leftText(String.format("Date: %s", event.getDate().format(DATE_FORMATTER)))).append("\n");
        report.append(Lines.leftText(String.format("Capacity: %d", event.getCapacity()))).append("\n");
        report.append(Lines.leftText(String.format("Code: %s", event.getCode()))).append("\n");
        report.append(Lines.leftText(String.format("Participants: %d", event.getParticipants().size()))).append("\n");
        if(isDetailed && !event.getParticipants().isEmpty()){
          report.append(Lines.leftText("")).append("\n");
          report.append(Lines.leftText("Participant Details:")).append("\n");
          for(Participant participant: event.getParticipants()){
            report.append(Lines.mixedLines()).append("\n");
            report.append(Lines.leftText(String.format("    Participant: %s", participant.getName()))).append("\n");
            report.append(Lines.leftText(String.format("    Email: %s", participant.getEmail()))).append("\n");
            report.append(Lines.leftText(String.format("    Phone: %s", participant.getPhone()))).append("\n");
            report.append(Lines.leftText(String.format("    Age: %s", participant.getAge()))).append("\n");
            report.append(Lines.leftText(String.format("    Gender: %s", participant.getGender()))).append("\n");
          }
        }
        report.append(Lines.straightLine()).append("\n");
      }
    }
    report.append(Lines.doubleLine()).append("\n");
    report.append(Lines.titleLine("End of Report")).append("\n");
    report.append(Lines.doubleLine());
    report.append("\n");
    return report.toString();
  }
}